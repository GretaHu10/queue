{"mappings":"AAAA,MAAM,UAAU,GAAG,CAAA,KAAK,GAAI;IACxB,OAAO;QACH,IAAI,EAAE,KAAK;QACX,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,IAAI;KACf,CAAA;CACJ;AACD,MAAM,QAAQ,GAAG,CAAC,IAAI,EAAE,KAAK,GAAK;IAC9B,MAAM,OAAO,GAAG;QACZ,IAAI,EAAE,KAAK;QACX,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,IAAI;KACf;IACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE;IACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;IAC3B,OAAO,OAAO,CAAA;CACjB;AAED,MAAM,MAAM,GAAG,CAAC,KAAI,EAAE,GAAE,GAAK;IACzB,GAAE,CAAC,KAAI,CAAC;IACR,IAAI,CAAC,KAAI,CAAC,QAAQ,EACd,OAAM;IAEV,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CACzC,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAE,CAAC;CAEnC;AAED,MAAM,IAAI,GAAG,CAAC,KAAI,EAAE,IAAI,GAAK;IACzB,IAAI,KAAI,KAAK,IAAI,EACb,OAAO,KAAI,CAAA;SACR,IAAI,KAAI,CAAC,QAAQ,EACpB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;QAC3C,IAAI,MAAM,EACN,OAAO,MAAM,CAAA;QAEjB,OAAO,SAAS,CAAA;KACnB;SAED,OAAO,SAAS,CAAA;CAEvB;AAED,MAAM,UAAU,GAAG,CAAC,IAAI,EAAE,IAAI,GAAK;IAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ;IACrC,IAAI,KAAK,GAAG,CAAC;IACb,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CACpC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,EACpB,KAAK,GAAG,CAAC;IAGjB,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;CAC5B;AAID,MAAM,IAAI,GAAG,UAAU,CAAC,EAAE,CAAC;AAC3B,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;AAChC,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;AAChC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;AAClB,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;AAChC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC;AACpB,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC;AACpB,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC;AACpB,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC;AACpB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;AAEjB,MAAM,EAAE,GAAG,CAAA,IAAI,GAAI;IACf,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;CACzB;AACD,mBAAmB;AAGnB,iCAAiC;AAEjC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC;AACvB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC","sources":["tree.js"],"sourcesContent":["const createTree = value => {\r\n    return {\r\n        data: value,\r\n        children: null,\r\n        parent: null\r\n    }\r\n}\r\nconst addChild = (node, value) => {\r\n    const newNode = {\r\n        data: value,\r\n        children: null,\r\n        parent: node\r\n    }\r\n    node.children = node.children || []\r\n    node.children.push(newNode)\r\n    return newNode\r\n}\r\n\r\nconst travel = (tree, fn) => {\r\n    fn(tree)\r\n    if (!tree.children) {\r\n        return\r\n    }\r\n    for (let i = 0; i < tree.children.length; i++) {\r\n        travel(tree.children[i], fn)\r\n    }\r\n}\r\n\r\nconst find = (tree, node) => {\r\n    if (tree === node) {\r\n        return tree\r\n    } else if (tree.children) {\r\n        for (let i = 0; i < tree.children.length; i++) {\r\n            const result = find(tree.children[i], node)\r\n            if (result) {\r\n                return result\r\n            }\r\n            return undefined\r\n        }\r\n    } else {\r\n        return undefined\r\n    }\r\n}\r\n\r\nconst removeNode = (tree, node) => {\r\n    const siblings = node.parent.children\r\n    let index = 0\r\n    for (let i = 0; i < siblings.length; i++) {\r\n        if (siblings[i] === node) {\r\n            index = i\r\n        }\r\n    }\r\n    siblings.splice(index, 1)\r\n}\r\n\r\n\r\n\r\nconst tree = createTree(10)\r\nconst node2 = addChild(tree, 20)\r\nconst node3 = addChild(tree, 30)\r\naddChild(tree, 40)\r\nconst node5 = addChild(tree, 50)\r\naddChild(node2, 201)\r\naddChild(node2, 202)\r\naddChild(node2, 203)\r\naddChild(node2, 204)\r\nconsole.log(tree)\r\n\r\nconst fn = node => {\r\n    console.log(node.data)\r\n}\r\n// travel(tree, fn)\r\n\r\n\r\n// console.log(find(tree, node2))\r\n\r\nremoveNode(tree, node5)\r\nconsole.log(tree)"],"names":[],"version":3,"file":"tree.b5359fbe.js.map","sourceRoot":"/__parcel_source_root/"}